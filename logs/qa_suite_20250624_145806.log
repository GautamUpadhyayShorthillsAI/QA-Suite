2025-06-24 14:58:06 | INFO     | Frontend | info:76 | Starting QA-Suite Frontend | Context: {"streamlit_version": "1.24.0", "python_version": "3.12.3 (main, May 26 2025, 18:50:19) [GCC 13.3.0]"}
2025-06-24 14:58:06 | INFO     | Frontend | info:76 | JS file uploaded and processed | Context: {"filename": "jump_full_flow.js", "file_size": 10432, "content_length": 10432}
2025-06-24 14:58:06 | INFO     | Frontend | info:76 | Making API call to run script | Context: {"script_length": 10192}
2025-06-24 14:59:56 | ERROR    | Frontend | error:94 | Failed to run script | Context: {"status_code": 400, "response_text": "{\n  \"details\": \"No report generated.\",\n  \"error\": \"Test execution failed\",\n  \"healing_attempts\": [],\n  \"stderr\": \"\",\n  \"stdout\": \"============================= test session starts ==============================\\nplatform linux -- Python 3.12.3, pytest-8.4.0, pluggy-1.6.0\\nrootdir: /tmp/tmpy_gksj02\\nplugins: metadata-3.1.1, anyio-4.9.0, json-report-1.5.0\\ncollected 20 items\\n\\ntest_script.py Fsssssssssssssssssss\\n\\n=================================== FAILURES ===================================\\n_____ test_jump_iq_workflow[Successful End-to-End User Workflow Execution] _____\\n\\npage = <Page url='https://valueinsightpro.jumpiq.com/JumpFive/Valuations/ValuationEdit/17548'>\\ntest_case_name = 'Successful End-to-End User Workflow Execution'\\n\\n    @pytest.mark.parametrize(\\\"test_case_name\\\", [\\n        'Successful End-to-End User Workflow Execution',\\n        'Login with Invalid Company Email',\\n        'Login with Invalid Password',\\n        'Login Attempt without Accepting Terms & Conditions',\\n        'OTP Verification with Incorrect Code',\\n        'OTP Verification with Empty Input Fields',\\n        'Instant Report Creation: Attempt to Proceed Without Dealership Selection',\\n        'Instant Report Configuration: Verify Navigation Through All Steps',\\n        'Instant Report Configuration: Verify Direct Navigation to Sections (Highlights, KPIs, Financials)',\\n        'Navigation: Verify Access to Valuation Directory from Main Menu',\\n        'Valuation Directory: Search with End Date Before Start Date',\\n        'Valuation Directory: Search with No Filters Applied',\\n        'Valuation Directory: Verify Search Results Update on Filter Change',\\n        'Portfolio Management: Successful Navigation and New Portfolio Initiation',\\n        'Portfolio Configuration: Attempt to Proceed Without Dealership Selection',\\n        'Portfolio Configuration: Verify Dealership Modification and Re-Search Functionality',\\n        'UI/UX: Verify Main Navigation Menu (Hamburger) Functionality',\\n        'UI/UX: Verify Application Layout Consistency Across Viewport Changes',\\n        'Error Handling: Verify Login Failure on Network Interruption (Simulated)',\\n        'Security: Verify User Session Persistence After Successful Login'\\n    ])\\n    def test_jump_iq_workflow(page, test_case_name):\\n        # The provided JavaScript only covers the 'Successful End-to-End User Workflow Execution'.\\n        # For other test cases, specific steps and assertions would need to be added,\\n        # which are not present in the provided JS recording.\\n        # This script will execute the full successful workflow for the first test case,\\n        # and skip the others as their specific steps are not defined in the input.\\n    \\n        if test_case_name != 'Successful End-to-End User Workflow Execution':\\n            pytest.skip(f\\\"Test case '{test_case_name}' requires specific steps not provided in the recording.\\\")\\n            return\\n    \\n        # ===== STAGE 1: LOGIN & AUTHENTICATION =====\\n    \\n        # GOAL: Navigate to the application's login page and authenticate the user.\\n        page.goto('https://valueinsightpro.jumpiq.com/auth/login?redirect=/')\\n    \\n        # SETUP: Set a consistent desktop viewport for reliable element locating.\\n        page.set_viewport_size({\\\"width\\\": 1536, \\\"height\\\": 744})\\n    \\n        # STEP 1: Enter valid company email for a known test account.\\n        page.get_by_test_id(\\\"company-email-input\\\").click()\\n        page.get_by_test_id(\\\"company-email-input\\\").fill(\\\"test3\\\")\\n    \\n        # STEP 2: Enter the corresponding valid password for the test account.\\n        page.get_by_test_id(\\\"password-input\\\").click()\\n        page.get_by_test_id(\\\"password-input\\\").fill(\\\"value@123\\\")\\n    \\n        # STEP 3: Accept the Terms & Conditions, a required step for login.\\n        page.locator('.ant-checkbox-input').click()\\n    \\n        # STEP 4: Submit the valid login credentials. Expect navigation to the OTP verification page.\\n        with page.expect_navigation():\\n            page.locator('button').click()\\n    \\n        # ===== STAGE 2: OTP VERIFICATION =====\\n    \\n        # GOAL: Successfully pass the Two-Factor Authentication step.\\n        # STEP 5: Enter a valid five-digit OTP to complete authentication.\\n        page.locator('.ant-input-compact-first-item').click()\\n        page.locator('.ant-input-compact-first-item').fill(\\\"9\\\")\\n        page.locator('.ant-input:nth-child(2)').fill(\\\"9\\\")\\n        page.locator('.ant-input:nth-child(3)').fill(\\\"9\\\")\\n        page.locator('.ant-input:nth-child(4)').fill(\\\"9\\\")\\n        page.locator('.ant-input-compact-last-item').fill(\\\"9\\\")\\n    \\n        # STEP 6: Submit the valid OTP. Expect navigation to the main application dashboard.\\n        with page.expect_navigation():\\n            page.locator('.ant-btn-default').click()\\n    \\n        # ===== STAGE 3: INSTANT REPORT CREATION =====\\n    \\n        # GOAL: Initiate and configure a new \\\"Instant Report\\\" for a dealership.\\n        # STEP 7: From the dashboard, select the 'Instant Report' workflow card.\\n        page.locator('.card:nth-child(1) > .overlay').click()\\n    \\n        # STEP 8: Open the dealership selection dropdown menu in the 'Create Instant Report' modal.\\n        page.locator('#home_screen_new_val_drop_down').click()\\n    \\n        # STEP 9: Select a specific dealership from the dropdown list.\\n        page.locator('.ant-select-item-option-active > .ant-select-item-option-content').click()\\n    \\n        # STEP 10: Proceed to the next step in the report creation wizard.\\n        with page.expect_navigation():\\n            page.get_by_text('Next').click()\\n    \\n        # ===== STAGE 4: REPORT CONFIGURATION =====\\n    \\n        # GOAL: Configure the report settings and parameters.\\n        # STEP 11: Navigate to step 4 in the multi-step report configuration process.\\n        page.locator('.ant-steps-item:nth-child(4) .ant-steps-item-icon').click()\\n    \\n        # STEP 12: Select the second tab option in the configuration interface.\\n>       page.locator('.ant-tabs-tab:nth-child(2)').click()\\n\\ntest_script.py:115: \\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \\n/home/shtlp_0133/Desktop/Dev_Code_Test_suite/venv/lib/python3.12/site-packages/playwright/sync_api/_generated.py:15512: in click\\n    self._sync(\\n/home/shtlp_0133/Desktop/Dev_Code_Test_suite/venv/lib/python3.12/site-packages/playwright/_impl/_locator.py:160: in click\\n    return await self._frame.click(self._selector, strict=True, **params)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n/home/shtlp_0133/Desktop/Dev_Code_Test_suite/venv/lib/python3.12/site-packages/playwright/_impl/_frame.py:488: in click\\n    await self._channel.send(\\\"click\\\", locals_to_params(locals()))\\n/home/shtlp_0133/Desktop/Dev_Code_Test_suite/venv/lib/python3.12/site-packages/playwright/_impl/_connection.py:61: in send\\n    return await self._connection.wrap_api_call(\\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \\n\\nself = <playwright._impl._connection.Connection object at 0x7c2080b85340>\\ncb = <function Channel.send.<locals>.<lambda> at 0x7c20804bb920>\\nis_internal = False\\n\\n    async def wrap_api_call(\\n        self, cb: Callable[[], Any], is_internal: bool = False\\n    ) -> Any:\\n        if self._api_zone.get():\\n            return await cb()\\n        task = asyncio.current_task(self._loop)\\n        st: List[inspect.FrameInfo] = getattr(task, \\\"__pw_stack__\\\", inspect.stack())\\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\\n        self._api_zone.set(parsed_st)\\n        try:\\n            return await cb()\\n        except Exception as error:\\n>           raise rewrite_error(error, f\\\"{parsed_st['apiName']}: {error}\\\") from None\\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 60000ms exceeded.\\nE           Call log:\\nE             - waiting for locator(\\\".ant-tabs-tab:nth-child(2)\\\")\\n\\n/home/shtlp_0133/Desktop/Dev_Code_Test_suite/venv/lib/python3.12/site-packages/playwright/_impl/_connection.py:528: TimeoutError\\n=========================== short test summary info ============================\\nFAILED test_script.py::test_jump_iq_workflow[Successful End-to-End User Workflow Execution]\\n================== 1 failed, 19 skipped in 109.73s (0:01:49) ===================\\n\"\n}\n"}
2025-06-24 14:59:56 | ERROR    | Frontend | error:94 | Script execution returned error | Context: {"error": "Failed to run script", "has_logs": true}
2025-06-24 14:59:56 | INFO     | Frontend | info:76 | User completed all workflow steps | Context: {"final_step": 6, "total_steps": 7}
